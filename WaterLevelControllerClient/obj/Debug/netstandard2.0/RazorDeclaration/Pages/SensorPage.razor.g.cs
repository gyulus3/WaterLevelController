#pragma checksum "D:\Work\WaterLevelController\WaterLevelController\WaterLevelControllerClient\Pages\SensorPage.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b23f0ace63ecee5cc801c36f2ad52c29dd6e802d"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WaterLevelControllerClient.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "D:\Work\WaterLevelController\WaterLevelController\WaterLevelControllerClient\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "D:\Work\WaterLevelController\WaterLevelController\WaterLevelControllerClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "D:\Work\WaterLevelController\WaterLevelController\WaterLevelControllerClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 4 "D:\Work\WaterLevelController\WaterLevelController\WaterLevelControllerClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 5 "D:\Work\WaterLevelController\WaterLevelController\WaterLevelControllerClient\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "D:\Work\WaterLevelController\WaterLevelController\WaterLevelControllerClient\_Imports.razor"
using WaterLevelControllerClient;

#line default
#line hidden
#line 7 "D:\Work\WaterLevelController\WaterLevelController\WaterLevelControllerClient\_Imports.razor"
using WaterLevelControllerClient.Shared;

#line default
#line hidden
#line 8 "D:\Work\WaterLevelController\WaterLevelController\WaterLevelControllerClient\_Imports.razor"
using WaterLevelControllerClient.Data.Dto;

#line default
#line hidden
    [Microsoft.AspNetCore.Components.RouteAttribute("/sensorPage")]
    public partial class SensorPage : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 139 "D:\Work\WaterLevelController\WaterLevelController\WaterLevelControllerClient\Pages\SensorPage.razor"
       
    const string baseUrl = "https://localhost:5001/api/";
    bool loaded = false;
    DtoSensorListItemWithZone[] sensors;
    DtoScheduleListItem[] schedules;
    DtoSwitchListItem[] switches;
    DtoZoneListItem[] zones;
    int selectedZoneId;
    int selectedSwitchId;
    int selectedScheduleId;
    int selectedId;
    DtoCreateSensor createSensor;
    DtoEditSensor editSensor;

    protected override async Task OnInitializedAsync()
    {
        await GetSensors();
        loaded = true;
    }

    protected async Task GetSensors()
    {
        DtoSensorListItemWithZone[] loadedSensors = await Http.GetJsonAsync<DtoSensorListItemWithZone[]>(baseUrl + "sensors");

        if (loadedSensors != null && loadedSensors.Length > 0)
        {
            sensors = loadedSensors;
        }

        else
            sensors = null;
    }

    protected async Task GetSwitches()
    {
        DtoSwitchListItem[] loadedSwitches = await Http.GetJsonAsync<DtoSwitchListItem[]>(baseUrl + "switches/unusedSwitches/" + selectedId);

        if (loadedSwitches != null && loadedSwitches.Length > 0)
        {
            switches = loadedSwitches;
        }

        else
            switches = null;
    }

    protected async Task GetSchedules()
    {
        DtoScheduleListItem[] loadedSchedules = await Http.GetJsonAsync<DtoScheduleListItem[]>(baseUrl + "schedules");

        if (loadedSchedules != null && loadedSchedules.Length > 0)
        {
            schedules = loadedSchedules;
        }

        else
            schedules = null;
    }

    protected async Task GetZones()
    {
        DtoZoneListItem[] loadedZones = await Http.GetJsonAsync<DtoZoneListItem[]>(baseUrl + "zones");

        if (loadedZones != null && loadedZones.Length > 0)
        {
            zones = loadedZones;
        }

        else
            zones = null;
    }

    protected void ClearCreateSensor()
    {
        createSensor = new DtoCreateSensor();
    }


    protected async Task PostCreateSensor()
    {
        await Http.PostAsJsonAsync(baseUrl + "sensors", createSensor);
        await GetSensors();

    }

    protected async Task DeleteSelectedSensor()
    {
        await Http.DeleteAsync(baseUrl + "sensors/" + selectedId);
        await GetSensors();
    }

    protected async Task EditSelectedSensor()
    {
        editSensor.ZoneId = selectedZoneId;
        editSensor.ScheduleId = selectedScheduleId;
        editSensor.SwitchId = selectedSwitchId;
        await Http.PutAsJsonAsync(baseUrl + "sensors", editSensor);
        await GetSensors();
    }

    protected async Task SetEditSensor(int id)
    {
        selectedId = id;
        await GetSchedules();
        await GetSwitches();
        await GetZones();
        selectedZoneId = 0;
        selectedScheduleId = 0;
        selectedSwitchId = 0;

        bool found = false;
        int i = 0;
        while (!found && i < sensors.Length)
        {
            if (sensors[i].Id == selectedId)
            {
                editSensor = new DtoEditSensor();
                editSensor.Id = sensors[i].Id;
                editSensor.Ip = sensors[i].Ip;
                editSensor.Mac = sensors[i].Mac;
                editSensor.Name = sensors[i].Name;
                found = true;
            }
            i++;
        }
    }

    protected void SetDeleteSensor(int id)
    {
        selectedId = id;
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
